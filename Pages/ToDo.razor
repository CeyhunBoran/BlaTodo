@page "/"
@using Todo.Data
@using Todo.Models
@using Todo.Services
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity

@inherits OwningComponentBase<TodoService>
@inject NavigationManager NavigationManager
@inject SignInManager<TodoUser> SignInManager
@inject UserManager<TodoUser> UserManager
@attribute [Authorize]

@if (items != null)
{
    <button style="margin:0 auto; display:block; width:100px;height:30px" @onclick="NavigateToCreatePage">Add Item</button>
}
@if (items == null)
{
    <p><em>Loading...</em></p>
}
else if (!items.Any())
{
    <p><em>No ToDo items found.</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>id</th>
                <th>
                    <span class="sort-link" @onclick=@(() => SortTable("DateCreated"))>Date</span>
                    <span>@(GetSortStyle("DateCreated"))</span>
                </th>
                <th>Title</th>
                <th>Category</th>
                <th>Is Complete</th>
                <th>Edit</th>
                <th>Remove</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in items)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.DateCreated</td>
                    <td style="@(item.IsComplete ? "text-decoration: line-through" : "")">@item.Title</td>
                    <td>@item.Category</td>
                    <td>
                        @if (item.IsComplete)
                        {
                            <input type=checkbox @onchange="(() => ToggleToDo(item.Id))" id="@item.Id" checked />
                            <label for="@item.Id">&nbsp;</label>
                        }
                        else
                        {
                            <input type=checkbox @onchange="(() => ToggleToDo(item.Id))" id="@item.Id" />
                            <label for="@item.Id">&nbsp;</label>
                        }
                    </td>
                    <td><button @onclick='(() => NavigateToUpdatePage(item.Id.ToString("N")))'><i class="oi oi-pencil"></i></button></td>
                    <td><button @onclick="(() => RemoveTodo(item.Id))"><i class="oi oi-trash"></i></button></td>
                </tr>
            }
        </tbody>
    </table>
}



@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    public List<TodoItem> items;
    public TodoUser currentUser;
    private string newItem;
    private bool IsSortedAscending;
    private string CurrentSortColumn;

    /// <summary>
    /// This method is responsible for loading the initial data the page requires.  We store this sample data
    /// in a JSON file.
    /// </summary>
    /// <returns></returns>
    protected override void OnInitialized()
    {
        //GetTodos();

    }
    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationState).User;
        if(user.Identity.IsAuthenticated)
        {
            currentUser = await UserManager.GetUserAsync(user);
            GetTodos();
        }
    }

    private void NavigateToUpdatePage(string id)
    {
        NavigationManager.NavigateTo($"todoupdate/{id}");
    }

    private void NavigateToCreatePage()
    {
        NavigationManager.NavigateTo("todocreate");
    }
    /// <summary>
    /// This method Toggles isCompleted attribute
    /// </summary>
    private void ToggleToDo(Guid id)
    {
        Service.Toggle(id);
        GetTodos();
        //await GetTodosCached();

    }
    /// <summary>
    /// This method removes a Todo item.
    /// </summary>
    private void RemoveTodo(Guid id)
    {
        Service.Delete(id);
        GetTodos();
        //await GetTodosCached();
    }

    private string GetSortStyle(string columnName)
    {
        if (CurrentSortColumn != columnName)
        {
            return string.Empty;
        }
        if (IsSortedAscending)
        {
            return "▲";
        }
        else
        {
            return "▼";
        }
    }

    private void SortTable(string columnName)
    {
        if (columnName != CurrentSortColumn)
        {
            items = items.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            CurrentSortColumn = columnName;
            IsSortedAscending = true;

        }
        else
        {
            if (IsSortedAscending)
            {
                items = items.OrderByDescending(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }
            else
            {
                items = items.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }

            IsSortedAscending = !IsSortedAscending;
        }
    }
    public void GetTodos()
    {
        items = Service.GetAllById(currentUser.Id).OrderBy(x => x.DateCreated).ToList();

    }
    
   
}